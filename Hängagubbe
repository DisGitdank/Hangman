using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

internal class Program
{

    private static void Main(string[] args)
    {
        Console.WriteLine("One or two players? ");
        int.TryParse(Console.ReadLine(), out int inputplayers);
        // slänga in exception här


        if (inputplayers == 1)
        {
            string[] words = new[] // ska kanske göras till class? abstrakt?
            {
             "Coding",
             "Canvas",
             "Programming",
             "Hard",
             "Soft",
            };
            var chosenWord = words[new Random().Next(0, words.Length - 1)];

            var validCharacters = new Regex("^[a-z]$");

            var lives = 6;

            var letters = new List<string>();

            while (lives != 0)
            {
                var charactersLeft = 0;

                foreach (var character in chosenWord)
                {
                    var letter = character.ToString();

                    if (letters.Contains(letter))
                    {
                        Console.Write(letter);
                    }
                    else
                    {
                        Console.Write("_");

                        charactersLeft++;
                    }
                }
                Console.WriteLine(string.Empty);

                if (charactersLeft == 0)
                {
                    break;
                }

                Console.Write("Type in a letter: ");

                var key = Console.ReadKey().Key.ToString().ToLower();
                Console.WriteLine(string.Empty);

                if (!validCharacters.IsMatch(key))
                {
                    Console.WriteLine($"The letter {key} is invalid. Try again.");
                    continue;
                }

                if (letters.Contains(key))
                {
                    Console.WriteLine("You already entered this letter!");
                    continue;
                }

                letters.Add(key);

                if (!chosenWord.Contains(key))
                {
                    lives--;

                    if (lives > 0)
                    {
                        Console.WriteLine($"The letter {key} is not in the word. You have {lives} {(lives == 1 ? "try" : "tries")} left.");
                    }
                }
            }

            if (lives > 0)
            {
                Console.WriteLine($"You won with {lives} {(lives == 1 ? "life" : "lives")} left!");
            }
            else
            {
                Console.WriteLine($"You lost! The word was {chosenWord}.");
            }

        }
        if (inputplayers == 2) // har två val antingen får player 1 skriva
            //eller får man varannan gissning 
        {
            Console.WriteLine("Player 1 type a word ");
            string inputFromPlayer1 = Console.ReadLine();
            string[] choosenword= { inputFromPlayer1 };
            var validCharacters = new Regex("^[a-z]$");
            var lives = 6;

            var letters = new List<string>();
            var lives = 6;

            var letters = new List<string>();

            while (lives != 0)
            {
                var charactersLeft = 0;



            }
            foreach (var character in [choosenword])
            {
                var letter = character.ToString();

                if (letters.Contains(letter))
                {
                    Console.Write(letter);
                }
                else
                {
                    Console.Write("_");

                    charactersLeft++;
                }
            }
            Console.WriteLine(string.Empty);

            if (charactersLeft == 0)
            {
                break;
            }
        }
    
}
class Hängdagubben // ska kopplas till liven behöver dock en abstrakt klass
    //kanske kan baka in subtypspolomorfism
{
    private static void printGubbe(int lives)
    {
        if(lives == 0)
        {
            Console.WriteLine("\n+---+");
            Console.WriteLine("    |");
            Console.WriteLine("    |");
            Console.WriteLine("    |");
            Console.WriteLine("   ===");
        }
        else if(lives == 1)
        {
            Console.WriteLine("\n+---+");
            Console.WriteLine(" o   |");
            Console.WriteLine("    |");
            Console.WriteLine("    |");
            Console.WriteLine("   ===");
        }
        else if (lives == 2)
        {
            Console.WriteLine("\n+---+");
            Console.WriteLine(" o   |");
            Console.WriteLine(" |    |");
            Console.WriteLine("    |");
            Console.WriteLine("   ===");

        }
        else if (lives == 3)
        {
            Console.WriteLine("\n+---+");
            Console.WriteLine(" o   |");
            Console.WriteLine("/|    |");
            Console.WriteLine("    |");
            Console.WriteLine("   ===");
        }
        else if (lives == 4)
        {
            Console.WriteLine("\n+---+");
            Console.WriteLine(" o   |");
            Console.WriteLine("/|\\    |");
            Console.WriteLine("    |");
            Console.WriteLine("   ===");
        }
        else if (lives == 5)
        {
            Console.WriteLine("\n+---+");
            Console.WriteLine(" o   |");
            Console.WriteLine("/|\\    |");
            Console.WriteLine("/    |");
            Console.WriteLine("   ===");
        }
        else if (lives == 6)
        {
            Console.WriteLine("\n+---+");
            Console.WriteLine(" o   |");
            Console.WriteLine("/|\\    |");
            Console.WriteLine("/ \\   |");
            Console.WriteLine("   ===");
        }

    }
}
